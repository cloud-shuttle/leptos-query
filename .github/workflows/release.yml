name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build and test before release
  test:
    name: Test Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run all tests
        run: cargo test --all-features --verbose

      - name: Run integration tests
        run: cargo test --test integration_tests --all-features --verbose

      - name: Check examples
        run: cargo check --examples --all-features

      - name: Run clippy
        run: cargo clippy --all-features -- -D warnings

      - name: Security audit
        run: cargo install cargo-audit && cargo audit

  # Build for multiple platforms
  build:
    name: Build Release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build library
        run: cargo build --release --target ${{ matrix.target }} --all-features

      - name: Build examples
        run: cargo build --release --target ${{ matrix.target }} --examples --all-features

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/

  # Publish to crates.io
  publish:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Login to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --all-features

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog from commits
          CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.version }}
          release_name: Release ${{ steps.changelog.outputs.version }}
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            Add to your `Cargo.toml`:
            
            ```toml
            [dependencies]
            leptos-query = "${{ steps.changelog.outputs.version }}"
            ```
            
            ## Documentation
            
            - [API Reference](https://docs.rs/leptos-query)
            - [Examples](./examples/)
            - [Migration Guide](./docs/migration.md)
            
            ## Features
            
            - ðŸ”„ Automatic caching with configurable stale times
            - ðŸ”„ Background refetching for fresh data
            - ðŸ”„ Request deduplication
            - ðŸ”„ Optimistic updates
            - ðŸ”„ Retry logic with exponential backoff
            - ðŸ”„ Type-safe API with full Rust type system
            - ðŸ”„ Leptos 0.6 and 0.8 compatibility
          draft: false
          prerelease: false
